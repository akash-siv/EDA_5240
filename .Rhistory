color = "random-light"
)
# Assuming `us_map.png` exists in your working directory
wordcloud2(
data = state_freq,
figPath = "download.png",
size = 1.5,
color = "random-light"
)
# Assuming `us_map.png` exists in your working directory
wordcloud2(
data = state_freq,
figPath = "download.png",
size = 1.5,
color = "random-light"
)
# Assuming `us_map.png` exists in your working directory
wordcloud2(
data = state_freq,
figPath = "download.png",
size = 1.5,
color = "random-light"
)
# Create a word cloud for the first 10 elements in the city_freq table with a shape of usa with a outline of the map of the USA
wordcloud2(city_freq, size = 0.7, shape = 'usa', color = "skyblue", backgroundColor="black")
#wordcloud2(city_freq[1:50,], size = 0.7, shape = 'usa')
#wordcloud2(city_freq[1:10,], size = 0.7, shape = 'star')
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "download.png", size = 1.5, color = "skyblue", backgroundColor="black")
figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# Assuming `us_map.png` exists in your working directory
wordcloud2(
data = state_freq,
figPath = "download.png",
size = 1.5,
color = "random-light"
)
# Assuming `us_map.png` exists in your working directory
wordcloud2(
data = state_freq,
figPath = "download.png",
size = 1.5,
color = "random-light"
)
# Create a word count plot in ggplot for the first 10 elements in the city_freq table with usa as a outline of the map
city_freq %>%
slice_max(n = 10, order_by = n) %>%
ggplot(aes(x = reorder(city, n), y = n)) +
geom_col(fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 cities with the most haunted places",
x = "City",
y = "Number of haunted places") +
theme_minimal()
# Assuming `us_map.png` exists in your working directory
wordcloud2(
data = state_freq,
figPath = "download.png",
size = 1.5,
color = "random-light"
)
# Assuming `us_map.png` exists in your working directory
wordcloud2(
data = state_freq,
figPath = "download.png",
size = 1.5,
color = "random-light"
)
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "download.png", size = 1.5, color = "skyblue", backgroundColor="black")
figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "download.png", size = 1.5, color = "skyblue", backgroundColor="black")
#figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
#figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "download.png", size = 1.5, color = "skyblue", backgroundColor="black")
#figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
#figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "download.png", size = 1.5, color = "skyblue", backgroundColor="black")
#figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
#figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "download.png", size = 1.5, color = "skyblue", backgroundColor="black")
#figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
#figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
#figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
#figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
#figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
#figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
#figPaths = system.file("D:/AMOD/sem1/AMOD-5240H/EDA/download.png",package = "wordcloud2")
#figPaths
#wordcloud2(demoFreq, figPath = figPaths, size = 1.5,color = "skyblue")
frequency_table <- data.frame(
word = c("California", "Texas", "Pennsylvania", "Michigan", "Ohio",
"New York", "Illinois", "Kentucky", "Indiana", "Massachusetts"),
freq = c(1068, 696, 649, 528, 476, 459, 395, 370, 350, 341)
)
library(wordcloud2)
wordcloud2(frequency_table, figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
frequency_table <- data.frame(
word = c("California", "Texas", "Pennsylvania", "Michigan", "Ohio",
"New York", "Illinois", "Kentucky", "Indiana", "Massachusetts"),
freq = c(1068, 696, 649, 528, 476, 459, 395, 370, 350, 341)
)
library(wordcloud2)
wordcloud2(frequency_table, figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
frequency_table <- data.frame(
word = c("California", "Texas", "Pennsylvania", "Michigan", "Ohio",
"New York", "Illinois", "Kentucky", "Indiana", "Massachusetts"),
freq = c(1068, 696, 649, 528, 476, 459, 395, 370, 350, 341)
)
library(wordcloud2)
wordcloud2(frequency_table, figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
frequency_table <- data.frame(
word = c("California", "Texas", "Pennsylvania", "Michigan", "Ohio",
"New York", "Illinois", "Kentucky", "Indiana", "Massachusetts"),
freq = c(1068, 696, 649, 528, 476, 459, 395, 370, 350, 341)
)
library(wordcloud2)
wordcloud2(frequency_table, figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
# library
library(wordcloud2)
# Change the shape:
#wordcloud2(state_freq, size = 0.7, shape = 'star')
# Change the shape using your image
wordcloud2(state_freq[1:10,], figPath = "peaceAndLove.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
figPath = system.file("peaceAndLove.jpg",package = "wordcloud2")
figPath
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
figPath = system.file("peaceAndLove.jpg",package = "wordcloud2")
#figPath
#
#figPath = system.file("peaceAndLove.jpg",package = "wordcloud2")
#figPath
#wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(city_freq[, size = 0.7)
wordcloud2(city_freq, size = 0.7)
# wordcloud for city column
wordcloud2(city_freq, size = 0.7)
# wordcloud for location column
wordcloud2(location_freq, size = 0.7)
# wordcloud for state column
wordcloud2(state_freq, size = 0.7)
set.seed(1234) # for reproducibility
# wordcloud for city column
wordcloud2(city_freq, size = 0.7)
# wordcloud for location column
wordcloud2(location_freq, size = 0.7)
# wordcloud for state column
wordcloud2(state_freq, size = 0.7)
set.seed(123) # for reproducibility
# wordcloud for city column
wordcloud2(city_freq, size = 0.7)
# wordcloud for location column
wordcloud2(location_freq, size = 0.7)
# wordcloud for state column
wordcloud2(state_freq, size = 0.7)
set.seed(123) # for reproducibility
# wordcloud for city column
wordcloud2(city_freq, size = 0.7)
# wordcloud for location column
wordcloud2(location_freq, size = 0.7)
# wordcloud for state column
wordcloud2(state_freq, size = 0.7)
# Expirementation with leaflet
# Create 20 markers (Random points)
data = data.frame(
long=sample(seq(-150,150),20),
lat=sample(seq(-50,50),20),
val=round(rnorm(20),2),
name=paste("point",letters[1:20],sep="_")
)
# Show a CUSTOM circle at each position. Size defined in Pixel. Size does not change when you zoom
m=leaflet(data = data) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
radius=~val*14 ,
color=~ifelse(data$val>0 , "red", "orange"),
stroke = TRUE,
fillOpacity = 0.2,
popup = ~as.character(name)
)
# Expirementation with leaflet
library(leaflet)
# Expirementation with leaflet
library(leaflet)
# Expirementation with leaflet
library(leaflet)
# Create 20 markers (Random points)
data = data.frame(
long=sample(seq(-150,150),20),
lat=sample(seq(-50,50),20),
val=round(rnorm(20),2),
name=paste("point",letters[1:20],sep="_")
)
# Show a CUSTOM circle at each position. Size defined in Pixel. Size does not change when you zoom
m=leaflet(data = data) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
radius=~val*14 ,
color=~ifelse(data$val>0 , "red", "orange"),
stroke = TRUE,
fillOpacity = 0.2,
popup = ~as.character(name)
)
m
library(tidyverse)
# Importing the dataset
tuesdata <- tidytuesdayR::tt_load('2023-10-10')
haunted_places <- tuesdata$haunted_places
# Glimpse of the dataset
haunted_places %>% glimpse()
head(haunted_places)
# Counting unique values in each column
column_summary <- haunted_places %>%
summarise(across(everything(), ~ n_distinct(.)))
column_summary
# Get unique values in the state column in alphabetical order.
unique_states <- haunted_places %>%
distinct(state) %>%
arrange(state)
unique_states
# Haunted places in Washington D.C.
haunted_places_dc <- haunted_places %>%
filter(state == "Washington DC")
haunted_places_dc
# Cleaning the dataset
# Removing redundant columns
haunted_places <- haunted_places %>%
select(city, description, location, state, state_abbrev, latitude, longitude, city_latitude, city_longitude)
# Checking for missing values
missing_values <- haunted_places %>%
summarise(across(everything(), ~ sum(is.na(.))))
missing_values
# Dig deeper into the missing values
# removing the rows with missing values in city, location, city_latitude, city_longitude columns
haunted_places <- haunted_places %>%
filter(!is.na(city) & !is.na(location) & !is.na(city_latitude) & !is.na(city_longitude))
# Checking for missing values
missing_values <- haunted_places %>%
summarise(across(everything(), ~ sum(is.na(.))))
missing_values
# Before removing the duplicates
nrow(haunted_places)
# Find exact duplicates
duplicate_rows <- haunted_places %>%
group_by(across(everything())) %>%
filter(n() > 1) %>%
ungroup()
# Display the duplicate rows
print(duplicate_rows)
# Remove the Exact duplicate rows
haunted_places <- haunted_places %>%
distinct()
# find the total number of rows in the dataset after removing the duplicates
nrow(haunted_places)
# Frequency table for city column
city_freq <- haunted_places %>%
count(city, sort = TRUE)
city_freq
# Frequency table for location column
location_freq <- haunted_places %>%
count(location, sort = TRUE)
location_freq
# Frequency table for state column
state_freq <- haunted_places %>%
count(state, sort = TRUE)
state_freq
# wordcloud for city column
wordcloud2(city_freq, size = 0.7)
# wordcloud for location column
wordcloud2(location_freq, size = 0.7)
# wordcloud for state column
wordcloud2(state_freq, size = 0.7)
# Extract latitude and longitude for each location in the frequency table
location_coordinates <- haunted_places %>%
filter(location %in% frequency_table$location) %>%
select(location, latitude, longitude)
# View the result
print(location_coordinates)
# Extract latitude and longitude for each location in the frequency table
location_coordinates <- haunted_places %>%
filter(location %in% location_freq$location) %>%
select(location, latitude, longitude)
# View the result
print(location_coordinates)
# Filter rows where 'location' contains "Cemetery"
cemetery_coordinates <- haunted_places %>%
filter(grepl("Cemetery", location, ignore.case = TRUE)) %>%
select(location, latitude, longitude)
# Print the result
cemetery_coordinates
# Filter rows where 'location' contains "Cemetery"
cemetery_coordinates <- haunted_places %>%
filter(grepl("Cemetery", location, ignore.case = TRUE)) %>%
select(location, latitude, longitude) %>%
arrange(location)
# Print the result
cemetery_coordinates
# Filter rows where 'location' contains "Cemetery"
cemetery_coordinates <- haunted_places %>%
filter(grepl("Prince Georges county", location, ignore.case = TRUE)) %>%
select(location, latitude, longitude) %>%
arrange(location)
# Print the result
cemetery_coordinates
# Filter rows where 'location' contains "Cemetery"
cemetery_coordinates <- haunted_places %>%
filter(grepl("school", location, ignore.case = TRUE)) %>%
select(location, latitude, longitude) %>%
arrange(location)
# Print the result
cemetery_coordinates
# Filter rows where 'location' contains "Cemetery"
cemetery_coordinates <- haunted_places %>%
filter(grepl("school", location, ignore.case = TRUE)) %>%
select(location, latitude, longitude) %>%
arrange(location)
# Print the result
cemetery_coordinates
# Filter rows where 'location' contains "Cemetery"
cemetery_coordinates <- haunted_places %>%
filter(grepl("university", location, ignore.case = TRUE)) %>%
select(location, latitude, longitude) %>%
arrange(location)
# Print the result
cemetery_coordinates
# Finding the location which have same latitude and longitude
same_coordinates <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n() > 1) %>%
ungroup()
# Display the rows with same coordinates
same_coordinates
# Finding the location which have same latitude and longitude (without considering the NA values)
same_coordinates <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n() > 1) %>%
ungroup()
# Remove NA values
same_coordinates <- same_coordinates %>%
filter(!is.na(latitude) & !is.na(longitude))
same_coordinates
# Finding the location which have same latitude and longitude (without considering the NA values)
same_coordinates <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n() > 1) %>%
ungroup()
# Remove NA values
same_coordinates <- same_coordinates %>%
filter(!is.na(latitude) & !is.na(longitude))
same_coordinates
# Create a frequency table for the location column
same_coordinates_freq <- same_coordinates %>%
count(location, sort = TRUE)
# Finding the location which have same latitude and longitude (without considering the NA values)
same_coordinates <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n() > 1) %>%
ungroup()
# Remove NA values
same_coordinates <- same_coordinates %>%
filter(!is.na(latitude) & !is.na(longitude))
same_coordinates
# Create a frequency table for the location column
same_coordinates_freq <- same_coordinates %>%
count(location, sort = TRUE)
same_coordinates_freq
# Identify locations with the same latitude and longitude but different names
result <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n() > 1) %>%
distinct(location, latitude, longitude)
# Print the result
print(result)
# Identify locations with the same latitude and longitude but different names
result <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n() > 1) %>%
distinct(location, latitude, longitude)
# Remove NA values
result <- result %>%
filter(!is.na(latitude) & !is.na(longitude))
# Print the result
result
# Identify locations with the same latitude and longitude but different names
result <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n() > 1) %>%
distinct(location, latitude, longitude)
# Remove NA values
result <- result %>%
filter(!is.na(latitude) & !is.na(longitude))
# Print the result
result
# Arranging the result in latitude and longitude order
result <- result %>%
arrange(latitude, longitude)
# Identify locations with the same latitude and longitude but different names
result <- haunted_places %>%
group_by(latitude, longitude) %>%
filter(n_distinct(location) > 1) %>%  # Keep groups with more than one distinct location name
arrange(latitude, longitude)         # Arrange by latitude and longitude
# Remove NA values
result <- result %>%
filter(!is.na(latitude) & !is.na(longitude))
# Print the result
print(result)
# Clean the location column
# Replace locations with the longest name; if equal, use the first name
haunted_places_test <- haunted_places %>%
group_by(latitude, longitude) %>%
mutate(location = location[which.max(nchar(location) == max(nchar(location)))][1]) %>%  # Longest name or first in tie
ungroup()
# Print the updated data frame
haunted_places_test
# Clean the location column
# Replace locations with the longest name; if equal, use the first name
haunted_places_test <- haunted_places %>%
group_by(latitude, longitude) %>%
mutate(location = location[which.min(nchar(location))]) %>%  # Shortest name or first in tie
ungroup()
# Print the updated data frame
haunted_places_test
# Clean the location column
# Replace locations with the longest name; if equal, use the first name
updated_location_names <- result %>%
group_by(latitude, longitude) %>%
mutate(location = location[which.min(nchar(location))]) %>%  # Shortest name or first in tie
ungroup()
# Print the updated data frame
updated_location_names
# Conforming it is working or not
updated_location_names <- updated_location_names %>%
group_by(latitude, longitude) %>%
filter(n_distinct(location) > 1) %>%  # Keep groups with more than one distinct location name
arrange(latitude, longitude)         # Arrange by latitude and longitude
updated_location_names
haunted_places <- haunted_places %>%
group_by(latitude, longitude) %>%
mutate(location = location[which.min(nchar(location))]) %>%  # Shortest name or first in tie
ungroup()
# Frequency table for location column
location_freq <- haunted_places %>%
count(location, sort = TRUE)
location_freq
# Frequency table for location column removing NA values
location_freq <- haunted_places %>%
filter(!is.na(location)) %>%
count(location, sort = TRUE)
# Frequency table for location column removing NA values
location_freq <- haunted_places %>%
filter(!is.na(location)) %>%
count(location, sort = TRUE)
location_freq
